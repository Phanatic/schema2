# swagger.yml - Primary swagger YAML file for HelionCE REST API


swagger: '2.0'

# Document metadata
info:
  version: '2.0'
  title: Helion Code Engine REST API
  description: REST API for the Helion Code Engine (HelionCE) Continuous Integration & Deployment platform.


schemes:
  - http
host: crest.proxy:4001
basePath: /v2


##########################################################################
#                                                                        #
#                               PATHS                                    #
#                                                                        #
##########################################################################
paths:



  ######################### /auth/credentials #########################
  '/auth/credentials':

    post:
      tags:
        - Security
      summary: Store auth Credential.
      description: |
        Add security credential to the authstore. After this operation, the Credential is still
        unlinked to any entity.
      operationId: store_credential
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: credential
          in: body
          description: The Credential to store.
          schema:
            $ref: '#/definitions/Credential'
          required: true
      responses:
        201:
          description: Credential added.
          schema:
            $ref: '#/definitions/Credential'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'



  ######################### /auth/credentials/{credential_d} #########################
  '/auth/credentials/{credential_id}':
    delete:
      tags:
        - Security
      summary: Remove the specified credential from the authstore.
      operationId: forget_credential
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: credential_id
          in: path
          description: The (HCE) Credential id.
          required: true
          type: integer
          format: int32
      responses:
          204:
            description: Credential successfully forgotten.
          404:
            description: Item with specified id not found.


  ######################### /vcs #########################
  '/vcs':

    post:
      tags:
        - Vcs
      summary: Add a VCS instance.
      description: |
        Add (register) a Version Control System instance, such as GitHub, a GitHub Enterprise instance, a SVN instance, etc..
      operationId: addVcs
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: vcs
          in: body
          description: VCS to add.
          schema:
            $ref: '#/definitions/Vcs'
          required: true
      responses:
        201:
          description: Added VCS.
          schema:
            $ref: '#/definitions/Vcs'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    get:
      tags:
        - Vcs
      summary: List VCS instances.
      description: |
        List the registered VCS instances.
      operationId: getVcses # ugly!
      produces:
        - application/json
      responses:
        200:
          description: Array of registered VCS instances.
          schema:
            type: array
            items:
              $ref: '#/definitions/Vcs'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'



  ######################### /vcs/{vcs_id} #########################
  '/vcs/{vcs_id}':
    delete:
      tags:
        - Vcs
      summary: Remove (unregister) the specified VCS.
      operationId: remove_vcs
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: vcs_id
          in: path
          description: The (HCE) VCS id.
          required: true
          type: integer
          format: int32
      responses:
          204:
            description: Removed VCS.
          404:
            description: Item with specified id not found.

    get:
      tags:
        - Vcs
      summary: Get the specified VCS.
      operationId: get_vcs
      produces:
        - application/json
      parameters:
        - name: vcs_id
          in: path
          description: The (HCE) VCS id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: VCS object.
          schema:
            $ref: '#/definitions/Vcs'
        404:
          description: Item with specified id not found.

    # FIXME: need to add PUT/PATCH





  ######################### /vcs/repos #########################
  '/vcs/repos':

    post:
      tags:
        - Vcs
      summary: Add a `Repo` instance.
      description: |
        Add a Repo instance, such as `hpcloud/hce-cli`
      operationId: add_repo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: repo
          in: body
          description: The `Repo` to add.
          schema:
            $ref: '#/definitions/Repo'
          required: true
      responses:
        201:
          description: Item added.
          schema:
            $ref: '#/definitions/Repo'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    get:
      tags:
        - Vcs
      summary: List `Repo` instances.
      description: |
        List the `Repo` instances.
      operationId: get_repos
      produces:
        - application/json
      responses:
        200:
          description: Array of Repo instances.
          schema:
            type: array
            items:
              $ref: '#/definitions/Repo'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'


  ######################### /vcs/repos/{repo_id} #########################
  '/vcs/repos/{repo_id}':
    delete:
      tags:
        - Vcs
      summary: Remove the specified Repo.
      operationId: remove_repo
      produces:
        - application/json
      parameters:
        - name: repo_id
          in: path
          description: The (HCE) `Repo` id.
          required: true
          type: integer
          format: int32
      responses:
          204:
            description: Item removed.
          404:
            description: Item with specified id not found.

    get:
      tags:
        - Vcs
      summary: Get the `Repo` specified in the request.
      operationId: get_repo
      produces:
        - application/json
      parameters:
        - name: repo_id
          in: path
          description: The (HCE) item id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: The `Repo` instance.
          schema:
            $ref: '#/definitions/Repo'
        404:
          description: Item with specified id not found.

    # FIXME: need to add PUT/PATCH


  ######################### /vcs/account #########################
  '/vcs/account':

    post:
      tags:
        - Vcs
      summary: Add a user VCS account.
      description: |
        Add (register) a user's account for a particular VCS instance.
      operationId: add_vcs_account
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: vcs_account
          in: body
          description: The VCS account.
          schema:
            $ref: '#/definitions/VcsAccount'
          required: true
      responses:
        201:
          description: Added VCS account.
          schema:
            $ref: '#/definitions/VcsAccount'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    get:
      tags:
        - Vcs
      summary: Find user VCS account(s)
      description: Search for user VCS account(s) based on a combination of VCS id, HCE user id, and/or VCS user id (e.g. GitHub user id).
      operationId: find_vcs_account
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: vcs_id
          in: query
          description: VCS id.
          type: integer
          format: int32
          required: false
        - name: user_id
          in: query
          description: HCE user id.
          type: integer
          format: int32
          required: false
        - name: vcs_user_id
          in: query
          description: VCS user id (e.g. GitHub user id).
          type: string
          required: false
      responses:
        200:
          description: Array of VCS accounts. May contain zero, one, or many VCS accounts.
          schema:
            type: array
            items:
              $ref: '#/definitions/VcsAccount'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'


  ######################### /vcs/account/{vcs_account_id} #########################
  '/vcs/account/{vcs_account_id}':


    get:
      tags:
        - Vcs
      summary: Get a user VCS account.
      operationId: get_vcs_account
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: vcs_account_id
          in: path
          description: VCS account id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: VCS account.
          schema:
            $ref: '#/definitions/VcsAccount'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'


    put:
      tags:
        - Vcs
      summary: Update a user VCS account.
      operationId: update_vcs_account
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: vcs_account_id
          in: path
          description: VCS account id.
          required: true
          type: integer
          format: int32
        - name: vcs_account
          in: body
          description: VCS account.
          schema:
            $ref: '#/definitions/VcsAccount'
          required: true
      responses:
        201:
          description: Updated VCS account.
          schema:
            $ref: '#/definitions/VcsAccount'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'


    delete:
      tags:
        - Vcs
      summary: Remove a user VCS account.
      description: |
        Remove (unregister) a user account for a particular VCS instance.
      operationId: remove_vcs_account
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: vcs_account_id
          in: path
          description: VCS account id.
          type: integer
          format: int32
          required: true
      responses:
        204:
          description: Removed VCS account.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'


  ######################### /containers/types #########################
  '/containers/types':

    get:
      tags:
        - Container
      summary: |
        Enumeration of Container types, e.g. `DOCKER`, `ROCKET`, etc.
      operationId: get_container_types
      produces:
        - application/json
      responses:
        200:
          description: Array of Container types.
          schema:
            type: array
            items:
              type: string


  ######################### /container/registries #########################
  '/containers/registries':

    post:
      tags:
        - Container
      summary: Add a ContainerRegistry instance.
      description: |
        Add (register) a ContainerRegistry instance, such as DockerHub, or a local registry.
      operationId: add_container_registry
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: registry
          in: body
          description: ContainerRegistry to add.
          schema:
            $ref: '#/definitions/ContainerRegistry'
          required: true
      responses:
        201:
          description: Added ContainerRegistry.
          schema:
            $ref: '#/definitions/ContainerRegistry'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    get:
      tags:
        - Container
      summary: List ContainerRegistry instances.
      description: |
        List the registered ContainerRegistry instances.
      operationId: get_container_registries
      produces:
        - application/json
      responses:
        200:
          description: Array of registered ContainerRegistry instances.
          schema:
            type: array
            items:
              $ref: '#/definitions/ContainerRegistry'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'







  ######################### /container/registry/{registry_id} #########################
  '/containers/registries/{registry_id}':
    delete:
      tags:
        - Container
      summary: Remove (unregister) the specified ContainerRegistry.
      operationId: remove_container_registry
      produces:
        - application/json
      parameters:
        - name: registry_id
          in: path
          description: The (HCE) ContainerRegistry id.
          required: true
          type: integer
          format: int32
      responses:
          204:
            description: ContainerRegistry removed.
          404:
            description: Item with specified id not found.

    get:
      tags:
        - Container
      summary: Get the ContainerRegistry specified in the request.
      operationId: get_container_registry
      produces:
        - application/json
      parameters:
        - name: registry_id
          in: path
          description: The (HCE) item id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: ContainerRegistry object.
          schema:
            $ref: '#/definitions/ContainerRegistry'
        404:
          description: Item with specified id not found.

    # FIXME: need to add PUT/PATCH


  ######################### /containers/images #########################
  '/containers/images':

    post:
      tags:
        - Container
      summary: Add a ContainerImage instance.
      description: |
        Add (register) a ContainerImage instance, such as a Docker image.
      operationId: add_container_image
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: image
          in: body
          description: ContainerImage to add.
          schema:
            $ref: '#/definitions/ContainerImage'
          required: true
      responses:
        201:
          description: Added ContainerImage.
          schema:
            $ref: '#/definitions/ContainerImage'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    get:
      tags:
        - Container
      summary: List ContainerImage instances.
      description: |
        List the registered ContainerImage instances.
      operationId: get_container_images
      produces:
        - application/json
      responses:
        200:
          description: Array of registered ContainerImage instances.
          schema:
            type: array
            items:
              $ref: '#/definitions/ContainerImage'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'


  ######################### /containers/images/{image_id} #########################
  '/containers/images/{image_id}':
    delete:
      tags:
        - Container
      summary: Remove (unregister) the specified ContainerImage.
      operationId: remove_container_image
      produces:
        - application/json
      parameters:
        - name: image_id
          in: path
          description: The (HCE) ContainerImage id.
          required: true
          type: integer
          format: int32
      responses:
          204:
            description: Image unregistered.
          404:
            description: Image with specified id not found.

    get:
      tags:
        - Container
      summary: Get the ContainerImage specified in the request.
      operationId: get_container_image
      produces:
        - application/json
      parameters:
        - name: image_id
          in: path
          description: The (HCE) image id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: ContainerImage object.
          schema:
            $ref: '#/definitions/ContainerImage'
        404:
          description: Item with specified id not found.

    # FIXME: need to add PUT/PATCH


######################### /containers/build_containers #########################
  '/containers/build_containers':

    post:
      tags:
        - Container
      summary: Add a BuildContainer instance.
      description: |
        Add (register) a BuildContainer instance, such as a BuildContainer for Java, or nodejs, or PHP, etc.
      operationId: add_build_Container
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: build_container
          in: body
          description: BuildContainer to add.
          schema:
            $ref: '#/definitions/BuildContainer'
          required: true
      responses:
        201:
          description: Added BuildContainer.
          schema:
            $ref: '#/definitions/BuildContainer'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    get:
      tags:
        - Container
      summary: List BuildContainer instances.
      description: |
        List the registered BuildContainer instances.
      operationId: get_build_containers
      produces:
        - application/json
      responses:
        200:
          description: Array of registered BuildContainer instances.
          schema:
            type: array
            items:
              $ref: '#/definitions/BuildContainer'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'


  ######################### /containers/build_containers/{container_id} #########################
  '/containers/build_containers/{container_id}':
    delete:
      tags:
        - Container
      summary: Remove (unregister) the specified BuildContainer.
      operationId: remove_build_container
      produces:
        - application/json
      parameters:
        - name: container_id
          in: path
          description: The (HCE) BuildContainer id.
          required: true
          type: integer
          format: int32
      responses:
          204:
            description: BuildContainer removed.
          404:
            description: Item with specified id not found.

    get:
      tags:
        - Container
      summary: Get the BuildContainer specified in the request.
      operationId: get_build_container
      produces:
        - application/json
      parameters:
        - name: container_id
          in: path
          description: The (HCE) item id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: The BuildContainer instance.
          schema:
            $ref: '#/definitions/BuildContainer'
        404:
          description: Item with specified id not found.

    # FIXME: need to add PUT/PATCH





  ######################### /projects #########################
  '/projects':
    post:
      tags:
        - Project
      summary: Create a new project.
      description: |
        Create a new `Project`. The newly created `Project` will initially not have any
        members or owners.
      operationId: create_project
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project
          in: body
          description: Project to create.
          schema:
            $ref: '#/definitions/Project'
          required: true

      responses:
        201:
          description: Created Project.
          schema:
            $ref: '#/definitions/Project'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    get:
      tags:
        - Project
      summary: List projects, optionally filtering.
      description: Get the list of projects, optionally filtering by user membership, and/or deployment targets that the project is associated with.
      operationId: get_projects
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user_id
          in: query
          description: Filter the list of projects by whether this user is a member of that project.
          required: false
          type: integer
          format: int32
        - name: deployment_target_id
          in: query
          description: Filter the list of projects by whether the project has this environment as a target.
          required: false
          type: integer
          format: int32
      responses:
        200:
          description: Array of `Project` objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'



  ######################### /projects/{project_id} #########################
  '/projects/{project_id}':

    get:
      tags:
        - Project
      summary: |
        Get the specified instance.
      operationId: get_project
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project_id
          in: path
          description: HCE id of the `Project` to get.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Project object.
          schema:
            $ref: '#/definitions/Project'
        404:
          description: The specified instance is not found.

    put:
      tags:
        - Project
      summary: Update the specified `Project`.
      description: |
        Update the specified `Project` and return the updated `Project` instance.
      operationId: update_project
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project_id
          in: path
          description: |
            The id of the `Project` instance.
          required: true
          type: integer
          format: int32
        - name: project
          required: true
          in: body
          description: |
            The `Project` instance (with updated values).
          schema:
            $ref: '#/definitions/Project'
      responses:
        200:
          description: |
            The updated `Project` instance.
          schema:
            $ref: '#/definitions/Project'
        default:
          description: |
            Failed to update the `Project` instance.
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      tags:
        - Project
      summary: |
        Delete the specified `Project` instance.
      operationId: delete_project
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project_id
          in: path
          description: |
            The id of the `Project` instance to delete.
          required: true
          type: integer
          format: int32
      responses:
        204:
          description: |
            `Project` instance deleted.
        default:
          description: |
            Failed to delete the `Project` instance.
          schema:
            $ref: '#/definitions/ErrorResponse'



  ######################### /projects/{project_id}/members #########################
  '/projects/{project_id}/members':

    get:
      tags:
        - Project
      summary: Get the project members.
      description: Get all project members (including project owners).
      operationId: get_project_members
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project_id
          in: path
          description: The instance id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: |
            An array of `User` objects, which may be empty.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        404:
          description: The specified instance is not found.

    post:
      tags:
        - Project
      summary: Add a member (user) to a project.
      operationId: add_member
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project_id
          in: path
          description: The project id.
          required: true
          type: integer
          format: int32
        - name: user_id
          in: body
          description: The user id.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        201:
          description: Member added.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      tags:
        - Project
      summary: Remove a member (user) from a project.
      operationId: remove_member
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project_id
          in: path
          description: The project id.
          required: true
          type: integer
          format: int32
        - name: user_id
          in: body
          description: The user id.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        201:
          description: Member removed.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'



  ######################### /projects/{project_id}/owners #########################
  '/projects/{project_id}/owners':

    get:
      tags:
        - Project
      summary: Get project owners.
      description: Get the project owners (excluding non-owner members).
      operationId: get_project_owners
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project_id
          in: path
          description: The project id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: |
            An array of `User` objects, which may be empty.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        404:
          description: The specified instance is not found.

    post:
      tags:
        - Project
      summary: Add an owner (user) for a project.
      operationId: add_owner
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project_id
          in: path
          description: The project id.
          required: true
          type: integer
          format: int32
        - name: user_id
          in: body
          description: The user id.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        201:
          description: Owner added.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      tags:
        - Project
      summary: Remove an owner (user) from a project.
      operationId: remove_owner
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project_id
          in: path
          description: The project id.
          required: true
          type: integer
          format: int32
        - name: user_id
          in: body
          description: The user id.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        201:
          description: Owner removed.
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  ######################### /artifacts/{artifactId} #########################
  '/artifacts/{artifactId}':

    delete:
      tags:
        - Artifact
      summary: Deletes the artifact specified in the request params.
      description: |
        Deletes the artifact specified in the request params.
        If artifact with specified id not found, returns 404.
      operationId: deleteArtifact
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: artifactId
          in: path
          description: The artifact id we want to delete.
          required: true
          type: integer
          format: int32

      responses:

          404:
            description: Artifact with specified id is not found.

          204:
            description: Artifact succefully deleted.

    get:
      tags:
        - Artifact
      summary: Gets an artifact with id specified in the request.
      description: |
        Gets an artifact with id specified in the request.
        If there is no artifact with given id, returns 404.
      operationId: getArtifact
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: artifactId
          in: path
          description: The artifact id we want to return.
          required: true
          type: integer
          format: int32

      responses:

        200:
          description: Successful response an artifact.

          schema:
            $ref: '#/definitions/Artifact'
        404:
          description: Artifact with given id not found.


  '/artifacts/{artifactId}/download':
     get:
        summary: Download the artifact specified in the request params.
        description: |
          Download the artifact specified in the request params with the artifact streamed in the response. On error returns 500.
        operationId: downloadArtifact
        consumes:
          - application/json
        produces:
          - application/json

        parameters:
          - name: artifactId
            in: path
            description: The artifact id to download.
            required: true
            type: integer
            format: int32

        responses:

          200:
            description: Successful response with a stream of artifacts.


  ######################### /pipelines/builds #########################
  '/pipelines/builds':

    get:
      tags:
        - Build
      summary: List builds, optionally filtering by project_id.
      operationId: get_builds
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project_id
          in: query
          description: Project id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Array of `Build` objects, may be empty.
          schema:
            type: array
            items:
              $ref: '#/definitions/Build'



  ######################### /pipelines/builds/{build_id} #########################
  '/pipelines/builds/{build_id}':

    get:
      tags:
        - Build
      summary: Gets the specified build.
      operationId: get_build
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: build_id
          in: path
          description: Build id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Build object.
          schema:
            $ref: '#/definitions/Build'
        404:
          description: Build not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    delete:
      tags:
        - Build
      summary: Delete the specified build.
      operationId: delete_build
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: build_id
          in: path
          description: Build id.
          required: true
          type: integer
          format: int32
      responses:
        204:
          description: Build deleted.
        404:
          description: Build not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'


  '/pipelines/builds/{build_id}/artifacts':
    get:
      summary: Get the set of artifacts associated with the build specified in the request.
      description: |
        Get the set of artifacts associated with the build specified in the request.
        If there are no artifacts, returns an empty list.
      operationId: get_artifacts_for_build
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: build_id
          in: path
          description: The build id to list artifacts for.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Successful response with a listing of artifacts can be empty.
          schema:
            type: array
            items:
              $ref: '#/definitions/Artifact'

    post:
      summary: Create a new artifact per the request params.
      description: |
        Create a new artifact per the request params. and return 201.
        If failed to create returns 500.
      operationId: add_artifact
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: build_id
          in: path
          description: The build id to add artifact for.
          required: true
          type: integer
          format: int32
        - name: artifact
          in: body
          description: Artifact object.
          schema:
            $ref: '#/definitions/Artifact'
          required: true
      responses:
        201:
          description: Successful response with details of the newly created post deployment.
          schema:
            $ref: '#/definitions/Artifact'


  '/pipelines/builds/{build_id}/workspace':
    get:
      summary: Download the workspace specified in the request params.
      description: |
        Download the workspace specified in the request params with the workspace streamed in the response.
        On error returns 500.
      operationId: downloadWorkspace
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: build_id
          in: path
          description: The build id to download workspace for.
          required: true
          type: integer
          format: int32

      responses:

        200:
          description: Successful response with a stream of of workspace.


  '/pipelines/builds/{build_id}/logs/{type}/upload':
    post:
      summary: Uploads a log.
      description: |
        Uploads a log per the request params. and return 200.
        If failed to upload log returns 500.
      operationId: uploadLog
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: build_id
          in: path
          description: The build id to upload log for.
          required: true
          type: integer
          format: int32

        - name: type
          in: path
          description: The type of the log. # what is the schema for this?
          required: true
          type: string
      # - name: log
      #   in: body
      #   description: The log. # what is the schema for this?
      #   required: true

      responses:

        200:
          description: Successful response with artifact object.

          schema:
            $ref: '#/definitions/Artifact'


  '/pipelines/builds/{build_id}/workspace/upload':
    post:
      summary: Uploads a workspace.
      description: |
        Upload workspace per the request params. and return 200.
        If failed to upload workspace returns 500.
      operationId: uploadWorkspace
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: build_id
          in: path
          description: The build id to upload workspa for.
          required: true
          type: integer
          format: int32

      # - name: log
      #   in: body
      #   description: The log. # what is the schema for this?
      #   required: true

      responses:

        200:
          description: Successful response with artifact object.

          schema:
            $ref: '#/definitions/Artifact'

  ######################### /pipelines/triggers #########################
  '/pipelines/triggers':

    post:
      tags:
        - Build
      summary: Trigger a pipeline build.
      operationId: triggerPipelineBuild
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: build_trigger
          in: body
          description: PipelineTrigger event.
          schema:
            $ref: '#/definitions/PipelineTrigger'
          required: true

      responses:
        201:
          description: Added PipelineTrigger.
          schema:
            $ref: '#/definitions/PipelineTrigger'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  ######################### /pipelines/triggers/{trigger_id} #########################
  '/pipelines/triggers/{trigger_id}':

    get:
      tags:
        - Build
      summary: Get the specified pipeline trigger.
      operationId: get_pipeline_trigger
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: trigger_id
          in: path
          description: PipelineTrigger id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: PipelineTrigger object.
          schema:
            $ref: '#/definitions/PipelineTrigger'
        default:
          description: Failed to get PipelineTrigger.


  ######################### /pipelines/events #########################
  '/pipelines/events':

    post:
      tags:
        - Build
      summary: Record a PipelineEvent.
      operationId: pipeline_event_occurred
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pipeline_event
          in: body
          description: Pipeline event.
          schema:
            $ref: '#/definitions/PipelineEvent'
          required: true

      responses:
        201:
          description: Added PipelineEvent.
          schema:
            $ref: '#/definitions/PipelineEvent'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/ErrorResponse'

    get:
      tags:
        - Build
      summary: List pipeline events, optionally filtering by Build id.
      operationId: get_pipeline_events
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: build_id
          in: query
          description: Build id.
          required: false
          type: integer
          format: int32
      responses:
        200:
          description: Array of PipelineEvent objects. May be empty.
          schema:
            type: array
            items:
              $ref: '#/definitions/PipelineEvent'
        default:
          description: Unexpected error.

  ######################### /pipelines/events/{event_id} #########################
  '/pipelines/events/{event_id}':

    get:
      tags:
        - Build
      summary: Get the specified pipeline event.
      operationId: get_pipeline_event
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: event_id
          in: path
          description: PipelineEvent id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: PipelineEvent object.
          schema:
            $ref: '#/definitions/PipelineEvent'
        default:
          description: Failed to get PipelineEvent.






  ######################### /notifications/targets #########################
  '/notifications/targets':
    get:
      tags:
        - Notification
      summary: List notifiction targets, optionally filtering.
      operationId: get_notification_targets
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project_id
          in: query
          description: The HCE Project id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Array of NotificationTarget objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/NotificationTarget'
    post:
      tags:
        - Notification
      summary: Add a NotificationTarget (for a project).
      description: |
      operationId: add_notification_target
      consumes:
        - application/json
      produces:
        - application/json
      parameters:

        - name: notification_target
          in: body
          description: NotificationTarget object.
          schema:
            $ref: '#/definitions/NotificationTarget'
          required: true
      responses:
        201:
          description: Added NotificationTarget.
          schema:
            $ref: '#/definitions/NotificationTarget'
        default:
          description: Unexpected error



  ######################### /notifications/targets/{notification_target_id} #########################
  '/notifications/targets/{notification_target_id}':

    get:
      summary: Get the specified NotificationTarget.
      operationId: get_notification_target
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
        - name: notification_target_id
          in: path
          description: NotificationTarget id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: NotifictionTarget object.
          schema:
            $ref: '#/definitions/NotificationTarget'
        404:
          description: Not found.
    delete:
      summary: Remove NotificationTarget.
      operationId: remove_notification_target
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: notification_target_id
          in: path
          description: NotificationTarget id.
          required: true
          type: integer
          format: int32
      responses:
        204:
          description: Removed NotificationTarget.
        default:
          description: Unexpcted error.



  ######################### /pipelines/tasks #########################
  '/pipelines/tasks':
    get:
      tags:
        - Project
      summary: List the pipeline tasks, optionally filtering by project.
      operationId: get_pipeline_tasks
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project_id
          in: query
          description: Project id to filter by.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Array of PipelineTasks. May be empty.
          schema:
            type: array
            items:
              $ref: '#/definitions/PipelineTask'

    post:
      tags:
        - Project
      summary: Add a pipeline task for a specific project.
      operationId: add_pipeline_task
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pipeline_task
          in: body
          description: PipelineTask object.
          schema:
            $ref: '#/definitions/PipelineTask'
          required: true
      responses:

        201:
          description: Created PipelineTask.
          schema:
            $ref: '#/definitions/PipelineTask'


  ######################### /pipelines/tasks/{task_id} #########################
  '/pipelines/tasks/{task_id}':
    get:
      tags:
        - Project
      summary: Get the specified pipeline task.
      operationId: get_pipeline_task
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: task_id
          in: path
          description: PipelineTask id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: PipelineTask object.
          schema:
            $ref: '#/definitions/PipelineTask'

    delete:
      tags:
        - Project
      summary: Remove the specified pipeline task.
      operationId: remove_pipeline_task
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: task_id
          in: path
          description: The PipelineTask id to remove.
          required: true
          type: integer
          format: int32

      responses:
        204:
          description: Removed PipelineTask.
        default:
          description: Failed to remove PipelineTask.


  ######################### /users #########################
  '/users':

    get:
      tags:
        - User
      summary: List all users.
      operationId: get_users
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Array of user objects. May be empty.
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: Unknown error.



    post:
      tags:
        - User
      summary: Create a user.
      operationId: create_user
      consumes:
        - application/json
      produces:
        - application/json

      parameters:
       - name: user
         in: body
         description: User object.
         schema:
           $ref: '#/definitions/User'
         required: true
      responses:
        201:
          description: Newly created user.
          schema:
            $ref: '#/definitions/User'
        default:
          description: Failed to create the user.



  ######################### /users/{user_id} #########################
  '/users/{user_id}':

    get:
      tags:
        - User
      summary: Get the specified user.
      operationId: get_user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: User object.
          schema:
            $ref: '#/definitions/User'
        404:
          description: User not found.


    put:
      tags:
        - User
      summary: Update the specified user.
      operationId: update_user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User id.
          required: true
          type: integer
          format: int32

        - name: user
          in: body
          description: User object (with updated values).
          schema:
           $ref: '#/definitions/User'
          required: true
      responses:
        200:
          description: Updated user object.
          schema:
            $ref: '#/definitions/User'
        default:
          description: Failed to update the user.


    delete:
      tags:
        - User
      summary: Delete the specified user.
      operationId: delete_user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user_id
          in: path
          description: User id.
          required: true
          type: integer
          format: int32
      responses:
        204:
          description: User deleted.
        default:
          description: Failed to delete user.



######################### /deployments #########################
  '/deployments':
    get:
      tags:
        - Deployment
      summary: List deployments, optionally filtering by Project id or Build id.
      operationId: get_deployments
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: project_id
          in: query
          description: Project id.
          required: false
          type: integer
          format: int32
        - name: build_id
          in: query
          description: Build id.
          required: false
          type: integer
          format: int32
      responses:
        200:
          description: Array of Deployment objects.
          schema:
            type: array
            items:
              $ref: '#/definitions/Deployment'
    post:
      tags:
        - Deployment
      summary: Record a deployment.
      description: |
        Record a deploymennt. FIXME: Does invoking this method REGISTER a deployment that has occurred, or does it initiate a deployment?
      operationId: deployment_occurred
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: deployment
          in: body
          description: Deployment object.
          schema:
            $ref: '#/definitions/Deployment'
          required: true
      responses:
        201:
          description: Deployment object.
          schema:
            $ref: '#/definitions/Deployment'



  ######################### /deployments/{deployment_id} #########################
  '/deployments/{deployment_id}':
    get:
      tags:
        - Deployment
      summary: Get the specified deployment.
      operationId: get_deployment
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: deployment_id
          in: path
          description: Deployment iod.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: Successful response with a deployments.
          schema:
            $ref: '#/definitions/Deployment'

    delete:
      tags:
        - Deployment
      summary: Remove the specified deployment.
      description: |
        Remove the specified deployment. FIXME: Does invoking this operation indicate that a deployment has been deleted, or does it initiate deletion of a deployment?
      operationId: remove_deployment
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: deployment_id
          in: path
          description: Deployment id.
          required: true
          type: integer
          format: int32
      responses:
          204:
            description: Removed deployment.
          default:
            description: Failed to remove deployment.



  ######################### /deployments/targets #########################
  '/deployments/targets':

    post:
      tags:
        - Deployment
      summary: Add a deployment target.
      description: |
        Add (register) a deployment environment (target), such as a CloudFoundry instance.
      operationId: add_deployment_target
      consumes:
        - application/json
      produces:
         - application/json
      parameters:
        - name: deployment_target
          in: body
          description: DeploymentTarget object.
          schema:
            $ref: '#/definitions/DeploymentTarget'
          required: true
      responses:
        201:
          description: Added DeploymentTarget.
          schema:
            $ref: '#/definitions/DeploymentTarget'
        default:
          description: Failed to add the DeploymentTarget.


    get:
      tags:
        - Deployment
      summary: List the registered deployment targets, optionally filtering.
      description: |
        List the registered deployment targets, optionally filtering by owner user_id.
      operationId: get_deployment_targets
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user_id
          in: query
          description: User id.
          required: false
          type: integer
          format: int32
      responses:
        200:
          description: |
            Array of `DeploymentTarget` objects, which may be empty.
          schema:
            type: array
            items:
              $ref: '#/definitions/DeploymentTarget'
        default:
          description: Unknown error.



  ######################### /deployments/targets/{target_id} #########################
  '/deployments/targets/{target_id}':

    get:
      tags:
        - Deployment
      summary: Get the specified environment.
      operationId: get_deployment_target
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: target_id
          in: path
          description: DeploymentTarget id.
          required: true
          type: integer
          format: int32
      responses:
        200:
          description: DeploymentTarget object.
          schema:
            $ref: '#/definitions/DeploymentTarget'
        404:
          description: DeploymentTarget not found.

    put:
      tags:
        - Deployment
      summary: Update the specified DeploymentTarget.
      operationId: update_target
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: target_id
          in: path
          description: DeploymentTarget id.
          required: true
          type: integer
          format: int32
        - name: deployment_target
          required: true
          in: body
          description: DeploymentTarget object.
          schema:
            $ref: '#/definitions/DeploymentTarget'
      responses:
        200:
          description: Updated deployment target.
          schema:
            $ref: '#/definitions/DeploymentTarget'

        default:
          description: Update failed.
          schema:
            $ref: '#/definitions/ErrorResponse'


    delete:
      tags:
        - Deployment
      summary: Remove (unregister) the specified deployment target.
      operationId: remove_deployment_target
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: target_id
          in: path
          description: DeploymentTarget id.
          required: true
          type: integer
          format: int32
      responses:
        204:
          description: DeploymentTarget removed.
        default:
          description: Failed to remove deployment target.







##########################################################################
#                                                                        #
#                         DEFINITIONS (MODELS)                           #
#                                                                        #
##########################################################################
definitions:


# Ultimately we'd like to move the definitions into a separate file, but the
# swagger tooling is still buggy around external references.

#  $ref: ./definitions.yml  # Commented out for now






  ############## Build ##############
  Build:
    type: object
    description: |
      Models an individual build (execution) of a Pipeline.
    required:
      - build_id
      - project_id
      - pipeline_trigger_id
      - result
      - result_message
      - created
    properties:
      build_id:
        type: integer
        format: int32
        description: The (HCE) id of the build instance.
      project_id:
        type: integer
        format: int32
        description: The (HCE) id of the project the build is associated with.
      pipeline_trigger_id:
        type: integer
        format: int32
        description: The (HCE) id of the project the build is associated with.
      result:
        type: string
        description: Result of the build process.
        enum: ["PENDING", "SUCCESS", "FAILURE"]
      result_message:
        type: string
        description: Message associated with the build result.
      created:
        type: string
        description: Build creation timestamp.
        format: date-time



  ############## PipelineTrigger ##############
  PipelineTrigger:
    type: object
    description: |
      Models a generic Pipeline build trigger event.
    discriminator: trigger_type
    required:
      - trigger_id
      - trigger_type
      - author
      - message
      - created
    properties:
      trigger_id:
        type: integer
        format: int32
        description: The (HCE) id of the instance.
      trigger_type:
        type: string
        description: The type of build trigger. (e.g. manual, or PR, etc.)
        enum: ["PullRequestPipelineTrigger", "ManaulPipelineTrigger"]
      author:
        type: string
        description: The author of a commmit selected.
      avatar_url:
        type: string
        description: The compare url of a commmit selected.
      message:
        type: string
        description: The message associated with the build trigger event.
      created:
        type: string
        format: date-time
        description: The date and time of when the build is created.



  ############## PullRequestPipelineTrigger ##############
  PullRequestPipelineTrigger:
    description: |
      Models a trigger of a build pipeline via a pull request webhook callback.
    allOf:
    - $ref: '#/definitions/PipelineTrigger'
    - type: object
      required:
        - pull_request_id
        - webhook_id
        - commit_sha
      properties:
        pull_request_id:
          type: string
          description: The (VCS) id of the pull request.
        webhook_id:
          type: string
          description: |
            The (VCS) id of the webhook that produced this pull request. REVISIT: do we need this?
        commit_sha:
          type: string
          description: The commit_sha of a commmit selected.
        commit_url:
          type: string
          description: The commit url of a commmit selected.
        compare_url:
          type: string
          description: The compare url of a commmit selected.



  ############## ManualPipelineTrigger ##############
  ManualPipelineTrigger:
    description: |
      Models a manual trigger of a build pipeline by a user for a specific project.
    allOf:
    - $ref: '#/definitions/PipelineTrigger'
    - type: object
      required:
        - user_id
        - project_id
        - commit_ref
      properties:
        user_id:
          type: integer
          format: int32
          description: The (HCE) id of the user who triggered the build.
        project_id:
          type: integer
          format: int32
          description: The (HCE) id of the project the build was triggered for.
        commit_ref:
          type: string
          description: The commit reference to build from (e.g. a Git commit_sha, or a SVN revision).


  ############## PipelineEvent ##############
  PipelineEvent:
    type: object
    description: |
      Models a pipeline event.
    required:
      - pipeline_event_id
      - build_id
      - event_name
      - result
      - started
      - finished
      - data
    properties:
      pipeline_event_id:
        type: integer
        format: int32
        description: Pipeline event id.
      build_id:
        type: integer
        format: int32
        description: Build id.
      event_name:
        type: string
        description: Event name.
      result:
        type: string
        description: Result of the pipeline process.
        enum: ["PENDING", "SUCCESS", "FAILURE"]
      message:
        type: string
        description: Message associated with the pipeline event.
      started:
        type: string
        description: Pipeline event start timestamp.
        format: date-time
      finished:
        type: string
        description: Pipeline event start timestamp.
        format: date-time
      data:
        type: string
        format: binary
        description: Data returned by the event.


  ############## artifact ##############
  Artifact:
    type: object
    description: Models an artifact.
    required:
      - artifact_id
      - message
      - artifact_type
      - created
    properties:
      artifact_id:
        type: integer
        format: int32
        description: The artifact id.
      message:
        type: string
        description: The artifiact message.
      created:
        type: string
        description: Artifact creation timestamp.
        format: date-time
      artifact_type:
        type: string
        description: The type of artifact, e.g. `BUILD_LOG`.
        enum: ["BUILD_LOG", "WORKSPACE", "TEST_LOG", "DEPLOY_LOG"]
      links:
        type: array
        description: An array of links to artifacts. ## This seems a bit dodgy
        items:
          $ref: '#/definitions/ArtifactLinks'




  ############## ArtifactLinks ##############
  ### REVISIT (neilotoole): NOt entirely sure what this does ###
  ArtifactLinks:
    type: object
    description: Artifact links.
    required:
      - self_url
      - edit_url
    properties:
      self_url:
        type: string
        description: The artifact self link.
      edit_url:
        type: string
        description: The artifact edit link.




  ############## NotificationTarget ##############
  NotificationTarget:
    type: object
    description: Models a notification target (e.g. a HipChat room or Slack channel) for a specific project.
    required:
      - targetId
      - project_id
      - notification_target_type
      - api_url
      - credential_id
    properties:
      targetId:
        type: integer
        format: int32
        description: The (HCE) id of this instance.
      project_id:
        type: integer
        format: int32
        description: The associated project id.
      notification_target_type:
        type: string
        description: |
          The notification target type, e.g. `SLACK`, `HIPCHAT`, etc.
        enum: ['SLACK', 'HIPCHAT', 'FLOWDOCK', 'HTTP_POST', 'GITHUB_PULL_REQUEST']
      api_url:
        type: string
        description: The target endpoint URL.
      credential_id:
        type: integer
        format: int32
        description: The (HCE) id of the credential used to access this target.




  ############## Project ##############
  Project:
    type: object
    description: |
      Models an individual project.
    required:
      - project_id
      - project_name
      - repo_id
      - repo_credential_id
      - created
    properties:
      project_id:
        type: integer
        format: int32
        description: The (HCE) id of this instance.
      project_name:
        type: string
        description: The user-provided label for the project.
      repo_id:
        type: integer
        format: int32
        description: The (HCE) id of the repo associated with the project
      repo_credential_id:
        type: integer
        format: int32
        description: The (HCE) id of the credential object that the project uses to access the repo.
      created:
        type: string
        format: date-time
        description: Timestamp of instance creation.




  ############## Repo ##############
  Repo:
    type: object
    description: Models a reference to a VCS repository instance, such as a GitHub repo, and references a specific branch.
    required:
      - repo_id
      - vcs_id
      - repo_name
    properties:
      repo_id:
        type: integer
        format: int32
        description: The (HCE) id of this repo.
      vcs_id:
        type: integer
        format: int32
        description: The (HCE) id of the VCS instance that this repo belongs to.
      repo_name:
        type: string
        description: |
          The name of the repo, e.g. `hpcloud/codeengine`.
      repoOwner:
        type: string
        description: |
          The owner of the repo (as determined by the repo itself), e.g. `neilotoole`. REVISIT: what do we need this for?


  ############## GitHubRepo ##############
  GitHubRepo:
    description: Models a reference to a GitHub repo..
    allOf:
    - $ref: '#/definitions/Repo'
    - type: object
      required:
        - github_repo_id
        - clone_url
        - ssh_url
        - http_url
        - webhook_id
        - webhook_url
        - webhook_credential_id
      properties:
        github_repo_id:
          type: string
          description: For GitHub repos, the GitHub identifier.
        clone_url:
          type: string
          description: The HTTPS URL used to clone the repo.
        ssh_url:
          type: string
          description: The SSH URL used to clone the repo.
        http_url:
          type: string
          description: The repo home page.
        webhook_id:
          type: string
          description: On GitHub, this is the id of the webhook for this repo that calls back to HelionCE.
        webhook_url:
          type: string
          description: On GitHub, this is the id of the webhook for this repo that calls back to HelionCE.
        webhook_credential_id:
          type: integer
          format: int32
          description: The webhook token.
        latestCommitSha:
          type: string
          description: |
            The most recent commit SHA. REVISIT: should we be storing this?

  ############## DeploymentTarget ##############
  DeploymentTarget:
    type: object
    discriminator: deploymentTargetType
    description: Models a deployment target/environment (e.g. a CloudFoundry instance) that a project can be deployed to.
    required:
      - target_id
      - deployment_target_type
      - api_url
      - owner_user_id
      - credential_id
      - label
    properties:
      target_id:
        type: integer
        format: int32
        description: The (HCE) id of this deployemtn target instance.
      deployment_target_type:
        type: string
        description: The type of deployment target.
        enum: ['CloudFoundryDeploymentTarget', 'AWSDeploymentTarget']
      api_url:
        type: string
        description: The URL endpoint that the target is accessible at.
      owner_user_id:
        type: integer
        format: int32
        description: The (HCE) user id of the owner/creator of this target.
      credential_id:
        type: integer
        format: int32
        description: Reference to the credentials for accessing this deployemtn target.
      label:
        type: string
        description: The user-friendly label for this instance, e.g. "Neil's first CloudFoundry environment"
      description:
        type: string
        description: An optional description for the deployment target.


  ############## CloudFoundryDeploymentTarget ##############
  CloudFoundryDeploymentTarget:
    description: Models a CloudFoundry deployment target/environment instance.
    allOf:
    - $ref: '#/definitions/DeploymentTarget'
    - type: object
      required:
        - organization
        - space
      properties:
        organization:
          type: string
          description: The organization under which a project will be deployed to this target.
        space:
          type: string
          description: The space within an organization that a project will be deployed under on this target.

  ############## AWSDeploymentTarget ##############
  AWSDeploymentTarget:
    description: Models an AWS deployment target/environment instance.
    allOf:
    - $ref: '#/definitions/DeploymentTarget'
    - type: object
      required:
        - aws_environment_name
      properties:
        aws_environment_name:
          type: string
          description: The AWS environment name.


  ############## Deployment ##############
  Deployment:
    type: object
    description: Models a deployment.
    required:
      - deployment_id
      - project_id
      - build_id
      - created
    properties:
      deployment_id:
        type: integer
        format: int32
        description: The (HCE) deployment id.
      project_id:
        type: integer
        format: int32
        description: The project id to be deployed.
      build_id:
        type: integer
        format: int32
        description: The build id to be deployed.
      target_id:
        type: integer
        format: int32
        description: The (HCE) id of the deployment target.
      application_id:
        type: string
        description: The application identifier (on the target environment).
      browse_url:
        type: string
        description: The url where the build is deployed.
      created:
        type: string
        format: date-time
        description: Deployment timestamp.



  ############## Credential ##############
  Credential:
    type: object
    description: Models a generic access credential.
    required:
      - credential_id
      - credential_type
      - credential_value
      - created
    properties:
      credential_id:
        type: integer
        format: int32
        description: The (HCE) id of this credential.
      credential_type:
        type: string
        description: The type of credential.
        enum: ['USERNAME_PASSWORD', 'OAUTH2_TOKEN', 'AWS_ACCESS_KEY', 'PKI']
      credential_key:
        type: string
        description: The credential key, e.g. the username, or AWS Access Key ID, etc. May be null.
      credential_value:
        type: string
        description: The credential value, e.g. the password, or AWS Secret Key.
      label:
        type: string
        description: An optional label for the credential, e.g. "Alice's GitHub OAuth token".
      created:
        type: string
        description: The creation timestamp.
        format: date-time



  ############## User ##############
  User:
    type: object
    description: Models a User instance.
    required:
      - user_id
      - email
      - full_name
      - created
    properties:
      user_id:
        type: integer
        format: int32
        description: The (HCE) id of this User instance.
      email:
        type: string
        description: The user's email.
      full_name:
        type: string
        description: |
          The user's full name, e.g. "Alice McAlister"
      created:
        type: string
        format: date-time
        description: The user creation timestamp.




  ############## VcsAccount ##############
  Vcs:
    type: object
    description: |
      Models a reference to a Version Control System instance, e.g. GitHub.com, or a GitHub Enterprise instance, or a SVN instance.
    required:
      - vcs_id
      - vcs_type
      - api_url
      - label
    properties:
      vcs_id:
        type: integer
        format: int32
        description: The (HCE) id of this VCS instance.
      vcs_type:
        type: string
        description: The VCS type.
        enum: ['GITHUB', 'GITHUB_ENTERPRISE', 'BITBUCKET', 'SVN']
      api_url:
        type: string
        description: The URL for API operations on this VCS instance.
      browse_url:
        type: string
        description: The browser URL for this VCS instance.
      label:
        type: string
        description: The user-friendly label for this VCS instance. Must be unique.


  ############## VcsAccount ##############
  VcsAccount:
    type: object
    description: |
      Models a user account on a particular VCS instance.
    required:
      - vcs_account_id
      - vcs_id
      - user_id
    properties:
      vcs_account_id:
        type: integer
        format: int32
        description: The (HCE) id of this VCS account instnace.
      vcs_id:
        type: integer
        format: int32
        description: The (HCE) id of the VCS instance this account belongs to.
      user_id:
        type: integer
        format: int32
        description: The (HCE) id of the (HCE) user this account belongs to.
      vcs_user_id:
        type: string
        description: The VCS instance's identifer for this account (e.g. the GitHub user id).
      vcs_account_credential_id:
        type: integer
        format: int32
        description: The (HCE) id of this account's credential for accessing the VCS instance.

  ############## ContainerRegistry ##############
  ContainerRegistry:
    type: object
    description: |
      Models a reference to container registry, e.g. DockerHub.
    required:
      - registry_id
      - container_type
      - api_url
      - credential_id
      - label
    properties:
      registry_id:
        type: integer
        format: int32
        description: The (HCE) id of this instance.
      container_type:
        type: string
        description: The container technology type.
        enum: ['DOCKER', 'ROCKET', 'DRAWBRIDGE', 'LXD']
      api_url:
        type: string
        description: The URL for API operations on this instance.
      credential_id:
        type: integer
        format: int32
        description: |
          The id of the credentials used to access this registry. REVISIT: do we need to expose this?
      label:
        type: string
        description: The user-friendly label for this VCS instance. Must be unique.

  ContainerImage:
    type: object
    description: |
      Models a reference to a container image, e.g. a Docker image.
    required:
      - image_id
      - container_type
      - registry_id
      - repo
      - repo_tag
      - image_label
    properties:
      image_id:
        type: integer
        format: int32
        description: The (HCE) id of this instance.
      container_type:
        type: string
        description: The container technology type.
        enum: ['DOCKER', 'ROCKET', 'DRAWBRIDGE', 'LXD']
      registry_id:
        type: integer
        format: int32
        description: The (HCE) id of the registry instance where this container is hosted.
      repo:
        type: string
        description: The name of the image's repo in the container registry.
      repo_tag:
        type: string
        description: The image's tag in the container registry.
      image_label:
        type: string
        description: The user-friendly label for this instance. Must be unique.

  BuildContainer:
    description: |
      Models a reference to a build container. That is, a container image used
      for building a project of a specific type (e.g. Java, PHP, etc).
    type: object
    required:
      - build_container_id
      - image_id
      - build_container_label
    properties:
      build_container_id:
        type: integer
        format: int32
        description: The (HCE) id of this instance.
      image_id:
        type: integer
        format: int32
        description: The (HCE) id of the backing ContainerImage.
      build_container_label:
        type: string
        description: The user-friendly label for this BuildContainer instance. Must be unique.



  ############## PipelineTask ##############
  PipelineTask:
    type: object
    description: |
      Models a task to perform in a specific project pipeline. For example, a
      post-deployment task such as execution of StormRunner.
    required:
      - task_id
      - task_name
      - project_id
      - pipeline_phase
      - task_config
    properties:
      task_id:
        type: integer
        format: int32
        description: The (HCE) id of this task instance.
      task_name:
        type: string
        description: The name of the task, e.g. "StormRunner".
      project_id:
        type: integer
        format: int32
        description: The (HCE) id of the project to execute this task on.
      pipeline_phase:
        type: string
        description: |
          When in the pipeline to execute the task. REVISIT: may need to add a "sequence" for defining task order within the phase.
        enum: ["PRE_BUILD", "BUILD", "POST_BUILD", "PRE_TEST", "TEST", "POST_TEST", "PRE_DEPLOY", "DEPLOY", "POST_DEPLOY"]
      task_config:
        type: string
        description: |
          Configuration associated with this task (e.g. endpoint URLs, etc.). Note: This is usually in YAML format and variable subsitution may happen at runtime.
      task_credential_id:
        type: integer
        format: int32
        description: Optional credentials associated with this task.



  ############## ErrorResponse ##############
  ErrorResponse:
    type: object
    description: |
      A standard error object returned by all API calls.
    required:
      - api_version
      - status
    properties:
      api_version:
        type: string
        description: The API version, e.g. `v1`.
      status:
        type: string
        description: The HTTP status code.
      message:
        type: string
        description: The message associated with the error.
      log:
        type: string
        description: Any additional error information, such as log entries, stack trace, etc. Likely to be turned off in production environments.



